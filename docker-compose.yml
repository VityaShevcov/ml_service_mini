version: '3.8'

services:
  # Main application
  ml-chat-service:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"  # API server
      - "7861:7861"  # Gradio interface
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/ml_chat_service
      - DEBUG=true
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - .:/app  # For development hot-reload
    depends_on:
      - db
      - redis
    networks:
      - ml-chat-network
    restart: unless-stopped

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ml_chat_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ml-chat-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml-chat-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ml-chat-service
    networks:
      - ml-chat-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ml-chat-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - ml-chat-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ml-chat-network:
    driver: bridge

# =============================================================================
# Usage Examples:
# =============================================================================
# 
# Development:
# docker-compose up -d
# 
# Production:
# docker-compose --profile production up -d
# 
# With monitoring:
# docker-compose --profile monitoring up -d
# 
# Build and start:
# docker-compose up --build
# 
# View logs:
# docker-compose logs -f ml-chat-service
# 
# Stop services:
# docker-compose down
# 
# Clean up:
# docker-compose down -v --remove-orphans